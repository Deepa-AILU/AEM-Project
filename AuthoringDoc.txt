## Creating CRX Packages with Filters in AEM Authoring

This document outlines the steps to create CRX packages with specific filters using the AEM Authoring environment.  Filters define the content paths included in the package. This is essential for managing and deploying specific content subsets across AEM instances.

**Target Audience:** AEM Content Authors, Developers, and Administrators with basic knowledge of AEM Authoring.

**Prerequisites:**

*   Access to an AEM Authoring environment with sufficient permissions to create and manage packages. (e.g., `content-authors` group membership, or a group with similar permissions.)
*   Familiarity with AEM content structure and paths.
*   Understanding of the content to be included in the package.

**Steps:**

**1. Navigate to the Package Manager:**

*   In the AEM Authoring environment, navigate to the **Tools** menu.
*   Click on **Deployment**, then select **Packages**.

**2. Create a New Package:**

*   Click the **Create Package** button in the top-right corner.
*   A dialog box will appear.  Enter the following information:

    *   **Group:**  Specify a logical group for your package.  This helps organize packages within the Package Manager.  Examples: `content`, `components`, `templates`.
    *   **Name:** Give your package a descriptive name.  Examples: `website-homepage-content`, `marketing-landing-page-template`.
    *   **Version:** Assign a version number to the package.  This is important for tracking changes and managing updates.  Examples: `1.0`, `1.1`, `2.0`.
    *   **Description (Optional):** Provide a brief explanation of the package's purpose.

*   Click **OK**.  The package will be created and listed in the Package Manager.

**3. Edit the Package Filters:**

*   Locate the newly created package in the Package Manager list.
*   Click on the package to select it.  The package details will be displayed.
*   Click the **Edit** button (or double-click the package).
*   A dialog box with several tabs will appear.  Select the **Filters** tab.

**4. Add Filters:**

*   In the **Filters** tab, click the **Add Rule** button (usually represented by a "+" icon).
*   A new row will be added to the filters list.
*   In the **Filter Root Path** field, enter the AEM content path that you want to include in the package.

    *   **Example:**
        *   To include the entire content under the homepage:  `/content/mysite/en/home`
        *   To include a specific page: `/content/mysite/en/home/about-us`
        *   To include all content under a specific content fragment: `/content/dam/mysite/content-fragments/my-fragment`

*   (Optional) If you want to exclude specific nodes or properties within the specified path, you can use **Filter Rules**.  Click the "plus" icon next to "Rules" to add rules.  These rules can be used to exclude nodes using regular expressions.
*   Repeat the process to add more filters for different content paths as needed.

**Important Considerations for Filters:**

*   **Specificity:** Use the most specific path possible to avoid including unnecessary content. This will reduce the size of the package and improve deployment performance.
*   **Dependencies:** Ensure that all dependencies of the content included in the package are also included.  This might involve adding filters for templates, components, policies, designs, etc.
*   **Content Fragments & Assets:**  When packaging Content Fragments or Assets, ensure that you also include any linked assets or renditions.  Use the Dependency Finder (available in AEM as a Cloud Service) to identify these dependencies.
*   **Service Users:**  If the package contains content that requires specific service user permissions, consider including the service users and their corresponding ACLs (Access Control Lists). This is usually done using Jackrabbit FileVault's `rep:policy` settings. However, managing service users directly in packages should be done with careful consideration and understanding of AEM security principles.
*   **Overlapping Filters:** Be mindful of overlapping filters.  If a node is included by one filter and excluded by another, the exclusion usually takes precedence.

**5. Save the Filters:**

*   Once you have added all the desired filters, click the **Save** button (or the checkmark icon) at the bottom of the dialog.

**6. Build the Package:**

*   Back in the Package Manager, select the package.
*   Click the **Build** button.  AEM will process the package and create the `.zip` file containing the content specified by the filters.

**7. Download the Package:**

*   Once the build is complete, click the **Download** button.  The `.zip` file will be downloaded to your local machine.

**8. Validation (Recommended):**

*   Before deploying the package to a production environment, it is highly recommended to test it in a staging or development environment.  Upload and install the package on a staging server and verify that the included content is as expected and that all dependencies are resolved.

**Example Scenario: Creating a Package for a Specific Landing Page**

Let's say you want to create a package containing the content and configuration for a specific landing page at: `/content/mysite/en/campaigns/summer-sale`.  The landing page uses a custom component located at `/apps/mysite/components/landing-page`.  It also uses a template at `/conf/mysite/settings/wcm/templates/landing-page`.

Here's how you would configure the filters:

1.  **Landing Page Content:**  `/content/mysite/en/campaigns/summer-sale`
2.  **Landing Page Template:** `/conf/mysite/settings/wcm/templates/landing-page`
3.  **Landing Page Component:** `/apps/mysite/components/landing-page`
4.  **Client Libraries (Optional):** If the component uses specific client libraries (CSS/JS), include the path to the client library folder. For example: `/apps/mysite/clientlibs/landing-page`.

**Best Practices:**

*   **Regular Expressions:** Use regular expressions in filter rules for more flexible content exclusion.
*   **Clear Naming:** Use descriptive names and versions for packages to easily identify their purpose and content.
*   **Documentation:** Keep a record of the packages created and the content they contain.  This can be done in a separate document or within the package description.
*   **Automated Packaging:** For more complex scenarios, consider using the AEM Maven Plugin to automate package creation and deployment as part of your build process.
*   **Cloud Service Considerations:** AEM as a Cloud Service promotes the use of content packages sparingly.  Content changes should primarily be managed through content authoring, and code changes through CI/CD pipelines. Packages are most suitable for bootstrapping new environments or for specialized use cases that cannot be easily managed otherwise.

This document provides a comprehensive guide to creating CRX packages with filters in AEM Authoring. By following these steps and best practices, you can effectively manage and deploy specific content subsets across your AEM instances. Remember to test your packages thoroughly before deploying them to production environments.
